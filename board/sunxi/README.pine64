Pine64 board README
====================

The Pine64(+) is a single board computer equipped with an AArch64 capable ARMv8
compliant Allwinner A64 SoC.
This chip has ARM Cortex A-53 cores and thus can run both in AArch32
(compatible to 32-bit ARMv7) and AArch64 modes. Upon reset the SoC starts
in AArch32 mode and executes 32-bit code from the Boot ROM (BROM).
This has some implications on U-Boot.

Building the firmware
=====================

The Allwinner A64 firmware consists of three parts: U-Boot's SPL, an
ARM Trusted Firmware build and the U-Boot proper.

 SPL
-----
Compiling the SPL part for AArch64 at the moment results in a too big binary.
So there is a 32-bit configuration just for the SPL which is recommended for
now. For this you need a 32-bit ARM cross compiler (or compile natively on an
ARM(32) system).

$ export CROSS_COMPILE=arm-linux-gnueabihf-
$ make sun50i_spl32_defconfig
$ make

Copy the SPL binary (spl/sunxi-spl.bin) somewhere safe (as "make clean" in
the next step will delete it).

 U-Boot proper
---------------
The main U-Boot proper is a real 64-bit ARMv8 port and runs entirely in the
64-bit AArch64 mode. It can load any AArch64 code, EFI applications or arm64
Linux kernel images (often named "Image") using the booti command.
$ make clean
$ export CROSS_COMPILE=aarch64-linux-gnu-
$ make pine64_plus_defconfig
$ make

 ARM Trusted firmware (ATF)
----------------------------
Checkout the "allwinner" branch from the github repository [1] and build it:
$ export CROSS_COMPILE=aarch64-linux-gnu-
$ make PLAT=sun50iw1p1 DEBUG=1 bl31
  The resulting binary is build/sun50iw1p1/debug/bl31.bin.

Boot process
============
The on-die BROM code will try several methods to load and execute the firmware.
On the Pine64 this will result in the following boot order:
1) Reading 32KB from sector 16 (@8K) of the microSD card to SRAM A1. If the
BROM finds the magic "eGON" header in the first bytes, it will execute that
code. If not, it will:
2) Initialize the SPI0 controller and try to access a NOR flash connected to
it (using the CS0 pin). If a flash chip is found, the BROM will load the
first 32KB (from offset 0) into SRAM A1. Now it checks for the magic eGON
header and will execute the code upon finding it. If not, it will:
3) Initialize the USB OTG controller and will wait for a host to connect to
it, speaking the Allwinner proprietary (but deciphered) "FEL" USB protocol.

To boot the Pine64 board, you can use U-Boot and any of the described methods.

FEL boot (USB OTG)
------------------
FEL is the name of the Allwinner defined USB boot protocol built-in the
mask ROM of most Allwinner SoCs. It allows to bootstrap a board solely
by using the USB-OTG interface and a host port on another computer.
Connect either an "A to A" USB cable to the upper USB port on the Pine64
or get an adaptor and use a regular A-microB cable connected to it.
Remove a microSD card from the slot and power on the board.
On your host computer download and build the sunxi-tools package[2], then
use "sunxi-fel" to access the board:
$ ./sunxi-fel ver -v -p
This should give you an output starting with: AWUSBFEX soc=00001689(A64) ...
Load the firmware parts on the board and execute them:
$ ./sunxi-fel -v  -p spl sunxi-spl.bin write 0x4a000000 u-boot-dtb.bin \
write 0x44000 bl31.bin reset64 0x44000
You should see SPL, ATF and U-Boot output on the serial console, dropping you
to a U-Boot prompt. You can now insert a microSD card if needed.

microSD card
------------
Copy (or link) the ATF bl31.bin binary to U-Boot's root directory and assemble
the FIT image:
$ tools/mkimage -f boards/sunxi/sun50i-a64.its sun50i-a64.itb
Now copy the SPL and this image to the uSD card:
$ dd if=sunxi-spl.bin of=/dev/sdx bs=8k seek=1
$ dd if=sun50i-a64.itb of=/dev/sdx bs=8k seek=5
$ sync
(replace /dev/sdx with you SD card device file name, which could be
/dev/mmcblk[x] as well).

You can partition the microSD card, but leave the first MB unallocated (most
partitioning tools will do this anyway).

NOR flash
---------
The Pine64 board can be booted via an SPI NOR flash chip connected to SPI0/CS0
on the PI-2 headers.
Create the FIT image like described above the the SD card.
Now prepare a FEL connection like described above and use the sunxi-fel
tool to write to the NOR flash:
$ ./sunxi-fel spiflash-write 0 sunxi-spl.bin
$ ./sunxi-fel spiflash-write 32768 sun50i-a64.itb
Now boot the board without an SD card inserted and you should see the
U-Boot prompt on the serial console.

(Legacy) boot0 method
---------------------
boot0 is Allwiner's secondary program loader and it can be used as some kind
of SPL replacement to get U-Boot up and running from an microSD card.
For some time using boot0 was the only option to get the Pine64 booted.
With working DRAM init code in U-Boot's SPL this is no longer necessary,
but this method is described here for the sake of completeness.

The boot0 binary is a 32 KByte blob and contained in the official Pine64 images
distributed by Pine64 or Allwinner. It can be easily extracted from a micro
SD card or an image file:
# dd if=/dev/sd<x> of=boot0.bin bs=8k skip=1 count=4
where /dev/sd<x> is the device name of the uSD card or the name of the image
file. Apparently Allwinner allows re-distribution of this proprietary code
as-is.
This boot0 blob takes care of DRAM initialisation and loads the remaining
firmware parts, then switches the core into AArch64 mode.
The original boot0 code looks for U-Boot at a certain place on an uSD card
(at 19096 KB), also it expects a header with magic bytes and a checksum.
There is a tool called boot0img[3] which takes a boot0.bin image and a compiled
U-Boot binary (plus other binaries) and will populate that header accordingly.
To make space for the magic header, the pine64_plus_defconfig will make sure
there is sufficient space at the beginning of the U-Boot binary.
boot0img will also take care of putting the different binaries at the right
places on the uSD card and works around unused, but mandatory parts by using
trampoline code. See the output of "boot0img -h" for more information.
boot0img can also patch boot0 to avoid loading U-Boot from 19MB, instead
fetching it from just behind the boot0 binary (-B option).
$ ./boot0img -o firmware.img -B boot0.img -u u-boot-dtb.bin -e -s bl31.bin \
-a 0x44008 -d trampoline64:0x44000
Then write this image to a microSD card, replacing /dev/sdx with the right
device file (see above):
$ dd if=firmware.img of=/dev/sdx bs=8k seek=1

[1] https://github.com/apritzel/arm-trusted-firmware.git
[2] git://github.com/linux-sunxi/sunxi-tools.git
[3] https://github.com/apritzel/pine64/
